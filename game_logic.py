import random
from config import Config
from telebot import types

class GameLogic:
    @staticmethod
    def create_main_markup():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_status = types.KeyboardButton('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')
        btn_hunt = types.KeyboardButton('–û—Ö–æ—Ç–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤')
        btn_inventory = types.KeyboardButton('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å')
        btn_shop = types.KeyboardButton('üõí –ú–∞–≥–∞–∑–∏–Ω')
        btn_help = types.KeyboardButton('–ü–æ–º–æ—â—å')
        markup.add(btn_status, btn_hunt, btn_inventory, btn_shop, btn_help)
        return markup

    @staticmethod
    def create_battle_markup():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_attack = types.KeyboardButton('–ê—Ç–∞–∫–æ–≤–∞—Ç—å')
        btn_heal = types.KeyboardButton('–ò—Å—Ü–µ–ª–µ–Ω–∏–µ (30 –∑–æ–ª–æ—Ç–∞)')
        btn_flee = types.KeyboardButton('–°–±–µ–∂–∞—Ç—å')
        markup.add(btn_attack, btn_heal, btn_flee)
        return markup

    @staticmethod
    def generate_monster(player_level):
        base_hp = Config.BASE_MONSTER_HP + player_level * 5
        base_attack = Config.BASE_MONSTER_ATTACK + player_level * 2
        
        monster_hp = random.randint(base_hp, base_hp + 10)
        monster_attack = random.randint(base_attack, base_attack + 3)
        gold_reward = random.randint(*Config.HUNT_REWARD_RANGE) + player_level * 2
        exp_reward = random.randint(*Config.HUNT_EXP_RANGE) + player_level
        
        monster_types = [
            ('–ì–æ–±–ª–∏–Ω', '—Ä–∂–∞–≤—ã–π –∫–∏–Ω–∂–∞–ª', '–ì–æ–±–ª–∏–Ω—å–∏ —É—à–∏'),
            ('–û—Ä–∫', '—Ç–æ–ø–æ—Ä', '–ö–ª—ã–∫ –æ—Ä–∫–∞'),
            ('–¢—Ä–æ–ª–ª—å', '–¥—É–±–∏–Ω–∞', '–ö—Ä–æ–≤—å —Ç—Ä–æ–ª–ª—è'), 
            ('–°–∫–µ–ª–µ—Ç', '–∫–æ—Å—Ç—è–Ω–æ–π –º–µ—á', '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø—ã–ª—å'),
            ('–î–µ–º–æ–Ω', '–æ–≥–Ω–µ–Ω–Ω—ã–π –ø–æ—Å–æ—Ö', '–°–µ—Ä–¥—Ü–µ –¥–µ–º–æ–Ω–∞'),
            ('–í–∞–º–ø–∏—Ä', '–∫—Ä–æ–≤–∞–≤—ã–µ –∫–æ–≥—Ç–∏', '–ó—É–± –≤–∞–º–ø–∏—Ä–∞'),
            ('–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å', '—Å—Ç–∏—Ö–∏–π–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è', '–Ø–¥—Ä–æ —ç–ª–µ–º–µ–Ω—Ç–∞–ª—è')
        ]
        name, weapon, loot = random.choice(monster_types)
        
        # 50% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª—É—Ç
        additional_loot = None
        if random.random() < 0.5:
            additional_loot_items = [
                '–ó–æ–ª–æ—Ç–æ–π —Å–ª–∏—Ç–æ–∫',
                '–†–µ–¥–∫–∏–π –≥—Ä–∏–±',
                '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª',
                '–î—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫',
                '–†—É–Ω–∞ —Å–∏–ª—ã'
            ]
            additional_loot = random.choice(additional_loot_items)
        
        return {
            'hp': monster_hp,
            'max_hp': monster_hp,
            'attack': monster_attack,
            'gold': gold_reward,
            'exp': exp_reward,
            'name': name,
            'weapon': weapon,
            'loot': loot,
            'additional_loot': additional_loot
        }

    @staticmethod
    def start_battle(player):
        player.in_battle = True
        player.current_monster = GameLogic.generate_monster(player.level)
        monster = player.current_monster
        
        battle_stickers = {
            '–ì–æ–±–ª–∏–Ω': 'CAACAgIAAxkBAAEL3m1mE53JZ5xV6V4AAbKQJ1QzXzKv5AACaQsAAnDUuUqFJgABJQABNwXDNA',
            '–û—Ä–∫': 'CAACAgIAAxkBAAEL3m9mE53Y5v8AAU9T9wABQ5M3vJ2VXQACagsAAnDUuUqXy5J3XgABXzQ0',
            '–¢—Ä–æ–ª–ª—å': 'CAACAgIAAxkBAAEL3nFmE53m5V1QY7YAAbQ3GQABnz3e1gACbQsAAnDUuUoAAXZQ0h1y5jQ0',
            '–°–∫–µ–ª–µ—Ç': 'CAACAgIAAxkBAAEL3nNmE53zO5Y1eW4AAXmQ0QABnz3e1gACbwsAAnDUuUoAAXZQ0h1y5jQ0',
            '–î–µ–º–æ–Ω': 'CAACAgIAAxkBAAEL3nVmE5375V1QY7YAAbQ3GQABnz3e1gACcQsAAnDUuUoAAXZQ0h1y5jQ0'
        }
        
        sticker_id = battle_stickers.get(monster['name'], 'CAACAgIAAxkBAAEL3ndmE54J5V1QY7YAAbQ3GQABnz3e1gACcgsAAnDUuUoAAXZQ0h1y5jQ0')
        
        return {
            'sticker': sticker_id,
            'text': (
                f"ü¶ñ *–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª {monster['name']} —Å {monster['weapon']}!*\n\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster['hp']} HP\n"
                f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {monster['attack']}\n\n"
                "*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*"
            )
        }

    @staticmethod
    def battle_round(player):
        if not player.in_battle or not player.current_monster:
            return None, "–ë–æ–π –Ω–µ –Ω–∞—á–∞—Ç"
            
        monster = player.current_monster
        
        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        player_damage = max(1, player.attack + player.attack_bonus + random.randint(-2, 2))
        monster['hp'] -= player_damage
        
        if monster['hp'] <= 0:
            # –ü–æ–±–µ–¥–∞
            gold_reward = int(monster['gold'] * (1 + player.gold_bonus))
            exp_reward = int(monster['exp'] * (1 + player.exp_bonus))
            
            player.gold += gold_reward
            leveled_up = player.add_exp(exp_reward)
            
            loot = monster['loot']
            if monster['additional_loot']:
                loot += f", {monster['additional_loot']}"
            got_loot = player.add_to_inventory(loot)
            
            reward_text = (
                f"üéØ –¢—ã –ø–æ–±–µ–¥–∏–ª {monster['name']}!\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {gold_reward} –∑–æ–ª–æ—Ç–∞\n"
                f"üîÆ –û–ø—ã—Ç: +{exp_reward}\n"
            )
            if got_loot:
                reward_text += f"üéí –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {loot}\n"
            if leveled_up:
                reward_text += f"\nüåü –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {player.level}!"
            
            player.in_battle = False
            player.current_monster = None
            return True, reward_text
        
        # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç
        monster_damage = max(1, monster['attack'] + random.randint(-1, 1))
        player.take_damage(monster_damage)
        
        result = (
            f"‚öîÔ∏è –¢—ã –Ω–∞–Ω–µ—Å {player_damage} —É—Ä–æ–Ω–∞ {monster['name']}\n"
            f"üëπ {monster['name']} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {monster_damage} —É—Ä–æ–Ω–∞\n\n"
            f"‚ù§Ô∏è –¢–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.hp}/{player.max_hp}\n"
            f"üíÄ {monster['name']}: {monster['hp']}/{monster['max_hp']} HP"
        )
        
        if player.hp <= 0:
            result += "\n\nüíÄ –¢—ã –ø–æ–≤–µ—Ä–∂–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ü–µ–ª–µ–Ω–∏–µ."
            player.in_battle = False
            player.current_monster = None
            return True, result
        
        return False, result

    @staticmethod
    def help_text():
        return (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ:\n\n"
            "‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            "‚Ä¢ –û—Ö–æ—Ç–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤ - –Ω–∞—á–∞—Ç—å –±–∏—Ç–≤—É —Å –º–æ–Ω—Å—Ç—Ä–æ–º\n"
            "‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
            "‚Ä¢ üõí –ú–∞–≥–∞–∑–∏–Ω - –∫—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—é –∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞\n\n"
            "–í –±–æ—é:\n"
            "‚Ä¢ –ê—Ç–∞–∫–æ–≤–∞—Ç—å - –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä—É\n"
            "‚Ä¢ –ò—Å—Ü–µ–ª–µ–Ω–∏–µ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞ 30 –∑–æ–ª–æ—Ç–∞\n"
            "‚Ä¢ –°–±–µ–∂–∞—Ç—å - –≤—ã–π—Ç–∏ –∏–∑ –±–æ—è (–º–æ–Ω—Å—Ç—Ä –∏—Å—á–µ–∑–Ω–µ—Ç)\n\n"
            "–ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –º–æ–Ω—Å—Ç—Ä—ã!"
        )